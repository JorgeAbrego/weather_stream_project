version: '3.8'

# Airflow configuration for local development
x-airflow-common:
  &airflow-common
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:slim-2.8.2-python3.10}
  build:
    context: ./docker
    dockerfile: airflow.Dockerfile
  image: ${AIRFLOW_IMAGE_NAME}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  #--------------------------------------------------------------------------------------------------------------------------------------#
  # Postgres Services
  #--------------------------------------------------------------------------------------------------------------------------------------#
  # Postgres Server
  postgres:
    image: postgres:15-alpine
    container_name: postgres_server
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      #POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "${POSTGRES_USER}" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
  
  # PgAdmin Client
  pgadmin:
    image: dpage/pgadmin4:8.3
    container_name: pgadmin_client
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    restart: always
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - 81:80
    depends_on:
      - postgres

  #--------------------------------------------------------------------------------------------------------------------------------------#
  # Airflow Cluster
  #--------------------------------------------------------------------------------------------------------------------------------------#
  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: webserver
    #command: >
    #  bash -c "/opt/airflow/create_airflow_connections.sh &&
    #  exec /entrypoint airflow webserver"
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  # Airflow Init Service
  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  # Airflow Cli
  airflow-cli:
    <<: *airflow-common
    container_name: airflow_cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  #-------------------------------------------------------------------------------------------------------------------------------------------#
  # Kafka Cluster
  #-------------------------------------------------------------------------------------------------------------------------------------------#
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
  
  # Kafka broker
  broker:
    image: confluentinc/cp-kafka:7.5.0
    hostname: broker
    container_name: broker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    depends_on:
      - zookeeper
  
  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "8081:8081"
    depends_on:
      - broker

  schema-registrar:
    image: curlimages/curl:latest
    hostname: schema-registrar
    container_name: schema-registrar
    depends_on:
      - schema-registry
    volumes:
      - ./schemas/weather_data.avsc:/schema/weather_data.avsc
      - ./scripts/register_schema.sh:/register_schema.sh
    entrypoint: ["/bin/sh", "/register_schema.sh"]

  # Create topics at launch
  kafka-create-topics:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka-create-topics
    container_name: kafka_create_topics
    command: ["bash", "./create-topics.sh"]
    working_dir: /scripts
    volumes:
      - ./scripts:/scripts
    depends_on:
      - broker

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: TestVlady
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:29092'
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      #KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      #KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect0:8083
      #DYNAMIC_CONFIG_ENABLED: 'true'  # not necessary, added for tests
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: 'true'
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: 'true'
    ports:
      - 8090:8080
    depends_on:
      - broker

  #-------------------------------------------------------------------------------------------------------------------------------------------#
  # Spark Cluster
  #-------------------------------------------------------------------------------------------------------------------------------------------#
  # Spark Master Node
  spark-master:
    #image: docker.io/bitnami/spark:3.5.1
    image: ${SPARK_IMAGE_NAME}
    container_name: spark_master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - "./execution_scripts:/execution_scripts:rw"
    ports:
      - 9090:8080
      - 7077:7077

  # Spark Worker Node 1
  spark-worker:
    #image: docker.io/bitnami/spark:3.5.1
    image: ${SPARK_IMAGE_NAME}
    container_name: spark_worker_1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no

  # Spark Worker Node 1
  #spark-worker-2:
  #  #image: docker.io/bitnami/spark:3.5.1
  #  image: ${SPARK_IMAGE_NAME}
  #  container_name: spark_worker_2
  #  environment:
  #    - SPARK_MODE=worker
  #    - SPARK_MASTER_URL=spark://spark-master:7077
  #    - SPARK_WORKER_MEMORY=2G
  #    - SPARK_WORKER_CORES=1
  #    - SPARK_RPC_AUTHENTICATION_ENABLED=no
  #    - SPARK_RPC_ENCRYPTION_ENABLED=no
  #    - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
  #    - SPARK_SSL_ENABLED=no

  #-------------------------------------------------------------------------------------------------------------------------------------------#
  # Dev Environments
  #-------------------------------------------------------------------------------------------------------------------------------------------#
  # Jupyterlab Server
  jupyterlab:
    #image: ${JUPYTER_IMAGE_NAME:-quay.io/jupyter/datascience-notebook:lab-4.1.3}
    build:
      context: ./docker
      dockerfile: jupyter.Dockerfile
    image: ${JUPYTER_IMAGE_NAME}
    container_name: jupyterlab_server
    environment:
      - JUPYTER_ENABLE_LAB=${JUPYTER_ENABLE_LAB}
      - JUPYTER_TOKEN=${JUPYTER_TOKEN}
      - GRANT_SUDO=${GRANT_SUDO}
      - PYSPARK_PYTHON=python3
      - PYSPARK_DRIVER_PYTHON=jupyter
      - PYSPARK_DRIVER_PYTHON_OPTS='notebook'
      - SPARK_MASTER_URL=spark://spark-master:7077
    volumes:
      - ./data:/home/jovyan/data
      - ./notebooks:/home/jovyan/notebooks
    ports:
      - 8888:8888

volumes:
  postgres_data:
  pgadmin_data: